#include <iostream>
#include<ctime>
#include<cstdlib>
#include <algorithm>
#include <vector>
using namespace std;
typedef long long di;

template<class ForwardIt, class T, class Compare>
bool binary_search(ForwardIt first, ForwardIt last, const T& value, Compare comp)
{
    first = std::lower_bound(first, last, value, comp);
    return (!(first == last) && !(comp(value, *first)));
}

void zp(vector <di> a, di d)
{
    srand(static_cast<unsigned int>(time(0)));
    //for (di i = 0;i < d;i++)
        //a[i] = rand() % 20;

    while (d--)
    {
        a[d] = rand() % 20;
    }
}

int main() {
    srand(static_cast<unsigned int>(time(0)));
    di n, k, z;
    n = rand() % 20;
    k = rand() % 20;
    vector<di> score(n);
    vector<di> call(k);
    zp(score, n);
    zp(call, k);
    sort(score.begin(), score.end());
    for (auto uno : score) {
        cout << (binary_search(call.begin(), call.end(), uno) ? "YES" : "NO") << ' ';
    }
    system("pause");
    return 0;
}