#include <iostream>
#include<ctime>
#include<cstdlib>
#include <algorithm>
#include <vector>
using namespace std;
typedef long long di;

template<class ForwardIt, class T, class Compare>
bool binary_search(ForwardIt first, ForwardIt last, const T& value, Compare comp)
{
    first = std::lower_bound(first, last, value, comp);
    return (!(first == last) && !(comp(value, *first)));
}

int main() {
   srand(static_cast<unsigned int>(time(0)));
   di n, k, i = 0;
    n = rand() % 200000;   
    k = rand() % 200000;   
    vector<di> score, call;
    cout << "N="<<n << " K=" << k<<endl;
    while (i<n)
    {
        score.push_back(rand() % 4294967296);
        i++;
    }
    i = 0;
    while (i<k)
    {
        call.push_back(rand() % 4294967296);
        i++;
    }
    sort(score.begin(), score.end());
    for (auto uno : score) {
        cout << (binary_search(call.begin(), call.end(), uno) ? "YES" : "NO") << ' ';
    }
    system("pause");
    return 0;
}